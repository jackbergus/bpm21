/*
 * WestergaardNFALabel.h
 * This file is part of bpm21
 *
 * Copyright (C) 2021 - Giacomo Bergami
 *
 * bpm21 is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * bpm21 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with bpm21. If not, see <http://www.gnu.org/licenses/>.
 */


//
// Created by giacomo on 12/03/21.
//


#ifndef CLASSIFIERS_WESTERGAARDNFALABEL_H
#define CLASSIFIERS_WESTERGAARDNFALABEL_H

#include <ostream>
#include <unordered_set>
#include <sstream>
#include <algorithm>
#include <iterator>

/**
 * Definition of the label for the automaton generated by WestergaardNFALabel
 *
 * @tparam LabelType    Type associated to a single label
 */
template <typename LabelType>
struct WestergaardNFALabel {
    bool hasUniverseSetFromWhichSubtractLabels;
    std::unordered_set<LabelType> labels;

    WestergaardNFALabel() : WestergaardNFALabel{false, {}} {}
    WestergaardNFALabel(bool hasUniverseSetFromWhichSubtractLabels, const std::unordered_set<LabelType> &labels)
            : hasUniverseSetFromWhichSubtractLabels(hasUniverseSetFromWhichSubtractLabels), labels(labels) {}

    bool operator()(const LabelType& in) const {
        return hasUniverseSetFromWhichSubtractLabels ^ labels.contains(in);
    }

    static WestergaardNFALabel<LabelType> LabelSet(const std::unordered_set<LabelType>& labels) {
        return {false, labels};
    }

    static WestergaardNFALabel<LabelType> Sigma() {
        return {true, {}};
    }

    static WestergaardNFALabel<LabelType> Otherwise(const std::unordered_set<LabelType>& labels) {
        return {true, labels};
    }

    bool operator==(const WestergaardNFALabel &rhs) const {
        return hasUniverseSetFromWhichSubtractLabels == rhs.hasUniverseSetFromWhichSubtractLabels &&
               labels == rhs.labels;
    }

    bool operator!=(const WestergaardNFALabel &rhs) const {
        return !(rhs == *this);
    }

    friend std::ostream &operator<<(std::ostream &os, const WestergaardNFALabel &label) {
        static const char* comma = ",";
        if (!label.hasUniverseSetFromWhichSubtractLabels) {
            if (label.labels.empty()) {
                return os << "∅";
            } else {
                os << '{';
                std::copy(label.labels.begin(), label.labels.end(), std::ostream_iterator<LabelType>(os, comma));
                os << '}';
            }
        } else {
            os << "Σ";
            if (!label.labels.empty()) {
                os << "\\{";
                std::copy(label.labels.begin(), label.labels.end(), std::ostream_iterator<LabelType>(os, comma));
                os << '}';
            }
        }
        return os;
    }
};

namespace std {
    template <typename LabelType>
    struct hash<struct WestergaardNFALabel<LabelType>>
    {
        std::size_t operator()(const WestergaardNFALabel<LabelType>& k) const
        {
            size_t init = 31;
            for (const auto& x : k.args)
                init = hash_combine<WestergaardNFALabel<LabelType>>(init, x);
            return hash_combine<bool>(init, k.hasUniverseSetFromWhichSubtractLabels);
        }
    };

}

#endif //CLASSIFIERS_WESTERGAARDNFALABEL_H
